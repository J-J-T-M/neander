// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2023 12:05:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    neander_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module neander_top_vlg_sample_tst(
	mclk,
	sampler_tx
);
input  mclk;
output sampler_tx;

reg sample;
time current_time;
always @(mclk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module neander_top_vlg_check_tst (
	AC_out,
	cargaPC,
	incPC,
	INSTR_time,
	PC_out,
	RDM_out,
	REM_out,
	RI_out,
	sampler_rx
);
input [7:0] AC_out;
input  cargaPC;
input  incPC;
input [2:0] INSTR_time;
input [7:0] PC_out;
input [7:0] RDM_out;
input [7:0] REM_out;
input [7:0] RI_out;
input sampler_rx;

reg [7:0] AC_out_expected;
reg  cargaPC_expected;
reg  incPC_expected;
reg [2:0] INSTR_time_expected;
reg [7:0] PC_out_expected;
reg [7:0] RDM_out_expected;
reg [7:0] REM_out_expected;
reg [7:0] RI_out_expected;

reg [7:0] AC_out_prev;
reg  cargaPC_prev;
reg  incPC_prev;
reg [2:0] INSTR_time_prev;
reg [7:0] PC_out_prev;
reg [7:0] RDM_out_prev;
reg [7:0] REM_out_prev;
reg [7:0] RI_out_prev;

reg [7:0] AC_out_expected_prev;
reg  cargaPC_expected_prev;
reg  incPC_expected_prev;
reg [2:0] INSTR_time_expected_prev;
reg [7:0] PC_out_expected_prev;
reg [7:0] RDM_out_expected_prev;
reg [7:0] REM_out_expected_prev;
reg [7:0] RI_out_expected_prev;

reg [7:0] last_AC_out_exp;
reg  last_cargaPC_exp;
reg  last_incPC_exp;
reg [2:0] last_INSTR_time_exp;
reg [7:0] last_PC_out_exp;
reg [7:0] last_RDM_out_exp;
reg [7:0] last_REM_out_exp;
reg [7:0] last_RI_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	AC_out_prev = AC_out;
	cargaPC_prev = cargaPC;
	incPC_prev = incPC;
	INSTR_time_prev = INSTR_time;
	PC_out_prev = PC_out;
	RDM_out_prev = RDM_out;
	REM_out_prev = REM_out;
	RI_out_prev = RI_out;
end

// update expected /o prevs

always @(trigger)
begin
	AC_out_expected_prev = AC_out_expected;
	cargaPC_expected_prev = cargaPC_expected;
	incPC_expected_prev = incPC_expected;
	INSTR_time_expected_prev = INSTR_time_expected;
	PC_out_expected_prev = PC_out_expected;
	RDM_out_expected_prev = RDM_out_expected;
	REM_out_expected_prev = REM_out_expected;
	RI_out_expected_prev = RI_out_expected;
end


// expected INSTR_time[ 2 ]
initial
begin
	INSTR_time_expected[2] = 1'bX;
end 
// expected INSTR_time[ 1 ]
initial
begin
	INSTR_time_expected[1] = 1'bX;
end 
// expected INSTR_time[ 0 ]
initial
begin
	INSTR_time_expected[0] = 1'bX;
end 
// expected AC_out[ 7 ]
initial
begin
	AC_out_expected[7] = 1'bX;
end 
// expected AC_out[ 6 ]
initial
begin
	AC_out_expected[6] = 1'bX;
end 
// expected AC_out[ 5 ]
initial
begin
	AC_out_expected[5] = 1'bX;
end 
// expected AC_out[ 4 ]
initial
begin
	AC_out_expected[4] = 1'bX;
end 
// expected AC_out[ 3 ]
initial
begin
	AC_out_expected[3] = 1'bX;
end 
// expected AC_out[ 2 ]
initial
begin
	AC_out_expected[2] = 1'bX;
end 
// expected AC_out[ 1 ]
initial
begin
	AC_out_expected[1] = 1'bX;
end 
// expected AC_out[ 0 ]
initial
begin
	AC_out_expected[0] = 1'bX;
end 
// expected RI_out[ 7 ]
initial
begin
	RI_out_expected[7] = 1'bX;
end 
// expected RI_out[ 6 ]
initial
begin
	RI_out_expected[6] = 1'bX;
end 
// expected RI_out[ 5 ]
initial
begin
	RI_out_expected[5] = 1'bX;
end 
// expected RI_out[ 4 ]
initial
begin
	RI_out_expected[4] = 1'bX;
end 
// expected RI_out[ 3 ]
initial
begin
	RI_out_expected[3] = 1'bX;
end 
// expected RI_out[ 2 ]
initial
begin
	RI_out_expected[2] = 1'bX;
end 
// expected RI_out[ 1 ]
initial
begin
	RI_out_expected[1] = 1'bX;
end 
// expected RI_out[ 0 ]
initial
begin
	RI_out_expected[0] = 1'bX;
end 
// expected RDM_out[ 7 ]
initial
begin
	RDM_out_expected[7] = 1'bX;
end 
// expected RDM_out[ 6 ]
initial
begin
	RDM_out_expected[6] = 1'bX;
end 
// expected RDM_out[ 5 ]
initial
begin
	RDM_out_expected[5] = 1'bX;
end 
// expected RDM_out[ 4 ]
initial
begin
	RDM_out_expected[4] = 1'bX;
end 
// expected RDM_out[ 3 ]
initial
begin
	RDM_out_expected[3] = 1'bX;
end 
// expected RDM_out[ 2 ]
initial
begin
	RDM_out_expected[2] = 1'bX;
end 
// expected RDM_out[ 1 ]
initial
begin
	RDM_out_expected[1] = 1'bX;
end 
// expected RDM_out[ 0 ]
initial
begin
	RDM_out_expected[0] = 1'bX;
end 
// expected REM_out[ 7 ]
initial
begin
	REM_out_expected[7] = 1'bX;
end 
// expected REM_out[ 6 ]
initial
begin
	REM_out_expected[6] = 1'bX;
end 
// expected REM_out[ 5 ]
initial
begin
	REM_out_expected[5] = 1'bX;
end 
// expected REM_out[ 4 ]
initial
begin
	REM_out_expected[4] = 1'bX;
end 
// expected REM_out[ 3 ]
initial
begin
	REM_out_expected[3] = 1'bX;
end 
// expected REM_out[ 2 ]
initial
begin
	REM_out_expected[2] = 1'bX;
end 
// expected REM_out[ 1 ]
initial
begin
	REM_out_expected[1] = 1'bX;
end 
// expected REM_out[ 0 ]
initial
begin
	REM_out_expected[0] = 1'bX;
end 
// expected PC_out[ 7 ]
initial
begin
	PC_out_expected[7] = 1'bX;
end 
// expected PC_out[ 6 ]
initial
begin
	PC_out_expected[6] = 1'bX;
end 
// expected PC_out[ 5 ]
initial
begin
	PC_out_expected[5] = 1'bX;
end 
// expected PC_out[ 4 ]
initial
begin
	PC_out_expected[4] = 1'bX;
end 
// expected PC_out[ 3 ]
initial
begin
	PC_out_expected[3] = 1'bX;
end 
// expected PC_out[ 2 ]
initial
begin
	PC_out_expected[2] = 1'bX;
end 
// expected PC_out[ 1 ]
initial
begin
	PC_out_expected[1] = 1'bX;
end 
// expected PC_out[ 0 ]
initial
begin
	PC_out_expected[0] = 1'bX;
end 

// expected incPC
initial
begin
	incPC_expected = 1'bX;
end 

// expected cargaPC
initial
begin
	cargaPC_expected = 1'bX;
end 
// generate trigger
always @(AC_out_expected or AC_out or cargaPC_expected or cargaPC or incPC_expected or incPC or INSTR_time_expected or INSTR_time or PC_out_expected or PC_out or RDM_out_expected or RDM_out or REM_out_expected or REM_out or RI_out_expected or RI_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AC_out = %b | expected cargaPC = %b | expected incPC = %b | expected INSTR_time = %b | expected PC_out = %b | expected RDM_out = %b | expected REM_out = %b | expected RI_out = %b | ",AC_out_expected_prev,cargaPC_expected_prev,incPC_expected_prev,INSTR_time_expected_prev,PC_out_expected_prev,RDM_out_expected_prev,REM_out_expected_prev,RI_out_expected_prev);
	$display("| real AC_out = %b | real cargaPC = %b | real incPC = %b | real INSTR_time = %b | real PC_out = %b | real RDM_out = %b | real REM_out = %b | real RI_out = %b | ",AC_out_prev,cargaPC_prev,incPC_prev,INSTR_time_prev,PC_out_prev,RDM_out_prev,REM_out_prev,RI_out_prev);
`endif
	if (
		( AC_out_expected_prev[0] !== 1'bx ) && ( AC_out_prev[0] !== AC_out_expected_prev[0] )
		&& ((AC_out_expected_prev[0] !== last_AC_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[0] = AC_out_expected_prev[0];
	end
	if (
		( AC_out_expected_prev[1] !== 1'bx ) && ( AC_out_prev[1] !== AC_out_expected_prev[1] )
		&& ((AC_out_expected_prev[1] !== last_AC_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[1] = AC_out_expected_prev[1];
	end
	if (
		( AC_out_expected_prev[2] !== 1'bx ) && ( AC_out_prev[2] !== AC_out_expected_prev[2] )
		&& ((AC_out_expected_prev[2] !== last_AC_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[2] = AC_out_expected_prev[2];
	end
	if (
		( AC_out_expected_prev[3] !== 1'bx ) && ( AC_out_prev[3] !== AC_out_expected_prev[3] )
		&& ((AC_out_expected_prev[3] !== last_AC_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[3] = AC_out_expected_prev[3];
	end
	if (
		( AC_out_expected_prev[4] !== 1'bx ) && ( AC_out_prev[4] !== AC_out_expected_prev[4] )
		&& ((AC_out_expected_prev[4] !== last_AC_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[4] = AC_out_expected_prev[4];
	end
	if (
		( AC_out_expected_prev[5] !== 1'bx ) && ( AC_out_prev[5] !== AC_out_expected_prev[5] )
		&& ((AC_out_expected_prev[5] !== last_AC_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[5] = AC_out_expected_prev[5];
	end
	if (
		( AC_out_expected_prev[6] !== 1'bx ) && ( AC_out_prev[6] !== AC_out_expected_prev[6] )
		&& ((AC_out_expected_prev[6] !== last_AC_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[6] = AC_out_expected_prev[6];
	end
	if (
		( AC_out_expected_prev[7] !== 1'bx ) && ( AC_out_prev[7] !== AC_out_expected_prev[7] )
		&& ((AC_out_expected_prev[7] !== last_AC_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AC_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AC_out_expected_prev);
		$display ("     Real value = %b", AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AC_out_exp[7] = AC_out_expected_prev[7];
	end
	if (
		( cargaPC_expected_prev !== 1'bx ) && ( cargaPC_prev !== cargaPC_expected_prev )
		&& ((cargaPC_expected_prev !== last_cargaPC_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cargaPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cargaPC_expected_prev);
		$display ("     Real value = %b", cargaPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cargaPC_exp = cargaPC_expected_prev;
	end
	if (
		( incPC_expected_prev !== 1'bx ) && ( incPC_prev !== incPC_expected_prev )
		&& ((incPC_expected_prev !== last_incPC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port incPC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", incPC_expected_prev);
		$display ("     Real value = %b", incPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_incPC_exp = incPC_expected_prev;
	end
	if (
		( INSTR_time_expected_prev[0] !== 1'bx ) && ( INSTR_time_prev[0] !== INSTR_time_expected_prev[0] )
		&& ((INSTR_time_expected_prev[0] !== last_INSTR_time_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTR_time[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTR_time_expected_prev);
		$display ("     Real value = %b", INSTR_time_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTR_time_exp[0] = INSTR_time_expected_prev[0];
	end
	if (
		( INSTR_time_expected_prev[1] !== 1'bx ) && ( INSTR_time_prev[1] !== INSTR_time_expected_prev[1] )
		&& ((INSTR_time_expected_prev[1] !== last_INSTR_time_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTR_time[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTR_time_expected_prev);
		$display ("     Real value = %b", INSTR_time_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTR_time_exp[1] = INSTR_time_expected_prev[1];
	end
	if (
		( INSTR_time_expected_prev[2] !== 1'bx ) && ( INSTR_time_prev[2] !== INSTR_time_expected_prev[2] )
		&& ((INSTR_time_expected_prev[2] !== last_INSTR_time_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTR_time[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTR_time_expected_prev);
		$display ("     Real value = %b", INSTR_time_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTR_time_exp[2] = INSTR_time_expected_prev[2];
	end
	if (
		( PC_out_expected_prev[0] !== 1'bx ) && ( PC_out_prev[0] !== PC_out_expected_prev[0] )
		&& ((PC_out_expected_prev[0] !== last_PC_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[0] = PC_out_expected_prev[0];
	end
	if (
		( PC_out_expected_prev[1] !== 1'bx ) && ( PC_out_prev[1] !== PC_out_expected_prev[1] )
		&& ((PC_out_expected_prev[1] !== last_PC_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[1] = PC_out_expected_prev[1];
	end
	if (
		( PC_out_expected_prev[2] !== 1'bx ) && ( PC_out_prev[2] !== PC_out_expected_prev[2] )
		&& ((PC_out_expected_prev[2] !== last_PC_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[2] = PC_out_expected_prev[2];
	end
	if (
		( PC_out_expected_prev[3] !== 1'bx ) && ( PC_out_prev[3] !== PC_out_expected_prev[3] )
		&& ((PC_out_expected_prev[3] !== last_PC_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[3] = PC_out_expected_prev[3];
	end
	if (
		( PC_out_expected_prev[4] !== 1'bx ) && ( PC_out_prev[4] !== PC_out_expected_prev[4] )
		&& ((PC_out_expected_prev[4] !== last_PC_out_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[4] = PC_out_expected_prev[4];
	end
	if (
		( PC_out_expected_prev[5] !== 1'bx ) && ( PC_out_prev[5] !== PC_out_expected_prev[5] )
		&& ((PC_out_expected_prev[5] !== last_PC_out_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[5] = PC_out_expected_prev[5];
	end
	if (
		( PC_out_expected_prev[6] !== 1'bx ) && ( PC_out_prev[6] !== PC_out_expected_prev[6] )
		&& ((PC_out_expected_prev[6] !== last_PC_out_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[6] = PC_out_expected_prev[6];
	end
	if (
		( PC_out_expected_prev[7] !== 1'bx ) && ( PC_out_prev[7] !== PC_out_expected_prev[7] )
		&& ((PC_out_expected_prev[7] !== last_PC_out_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_out_expected_prev);
		$display ("     Real value = %b", PC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PC_out_exp[7] = PC_out_expected_prev[7];
	end
	if (
		( RDM_out_expected_prev[0] !== 1'bx ) && ( RDM_out_prev[0] !== RDM_out_expected_prev[0] )
		&& ((RDM_out_expected_prev[0] !== last_RDM_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[0] = RDM_out_expected_prev[0];
	end
	if (
		( RDM_out_expected_prev[1] !== 1'bx ) && ( RDM_out_prev[1] !== RDM_out_expected_prev[1] )
		&& ((RDM_out_expected_prev[1] !== last_RDM_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[1] = RDM_out_expected_prev[1];
	end
	if (
		( RDM_out_expected_prev[2] !== 1'bx ) && ( RDM_out_prev[2] !== RDM_out_expected_prev[2] )
		&& ((RDM_out_expected_prev[2] !== last_RDM_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[2] = RDM_out_expected_prev[2];
	end
	if (
		( RDM_out_expected_prev[3] !== 1'bx ) && ( RDM_out_prev[3] !== RDM_out_expected_prev[3] )
		&& ((RDM_out_expected_prev[3] !== last_RDM_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[3] = RDM_out_expected_prev[3];
	end
	if (
		( RDM_out_expected_prev[4] !== 1'bx ) && ( RDM_out_prev[4] !== RDM_out_expected_prev[4] )
		&& ((RDM_out_expected_prev[4] !== last_RDM_out_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[4] = RDM_out_expected_prev[4];
	end
	if (
		( RDM_out_expected_prev[5] !== 1'bx ) && ( RDM_out_prev[5] !== RDM_out_expected_prev[5] )
		&& ((RDM_out_expected_prev[5] !== last_RDM_out_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[5] = RDM_out_expected_prev[5];
	end
	if (
		( RDM_out_expected_prev[6] !== 1'bx ) && ( RDM_out_prev[6] !== RDM_out_expected_prev[6] )
		&& ((RDM_out_expected_prev[6] !== last_RDM_out_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[6] = RDM_out_expected_prev[6];
	end
	if (
		( RDM_out_expected_prev[7] !== 1'bx ) && ( RDM_out_prev[7] !== RDM_out_expected_prev[7] )
		&& ((RDM_out_expected_prev[7] !== last_RDM_out_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_expected_prev);
		$display ("     Real value = %b", RDM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RDM_out_exp[7] = RDM_out_expected_prev[7];
	end
	if (
		( REM_out_expected_prev[0] !== 1'bx ) && ( REM_out_prev[0] !== REM_out_expected_prev[0] )
		&& ((REM_out_expected_prev[0] !== last_REM_out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[0] = REM_out_expected_prev[0];
	end
	if (
		( REM_out_expected_prev[1] !== 1'bx ) && ( REM_out_prev[1] !== REM_out_expected_prev[1] )
		&& ((REM_out_expected_prev[1] !== last_REM_out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[1] = REM_out_expected_prev[1];
	end
	if (
		( REM_out_expected_prev[2] !== 1'bx ) && ( REM_out_prev[2] !== REM_out_expected_prev[2] )
		&& ((REM_out_expected_prev[2] !== last_REM_out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[2] = REM_out_expected_prev[2];
	end
	if (
		( REM_out_expected_prev[3] !== 1'bx ) && ( REM_out_prev[3] !== REM_out_expected_prev[3] )
		&& ((REM_out_expected_prev[3] !== last_REM_out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[3] = REM_out_expected_prev[3];
	end
	if (
		( REM_out_expected_prev[4] !== 1'bx ) && ( REM_out_prev[4] !== REM_out_expected_prev[4] )
		&& ((REM_out_expected_prev[4] !== last_REM_out_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[4] = REM_out_expected_prev[4];
	end
	if (
		( REM_out_expected_prev[5] !== 1'bx ) && ( REM_out_prev[5] !== REM_out_expected_prev[5] )
		&& ((REM_out_expected_prev[5] !== last_REM_out_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[5] = REM_out_expected_prev[5];
	end
	if (
		( REM_out_expected_prev[6] !== 1'bx ) && ( REM_out_prev[6] !== REM_out_expected_prev[6] )
		&& ((REM_out_expected_prev[6] !== last_REM_out_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[6] = REM_out_expected_prev[6];
	end
	if (
		( REM_out_expected_prev[7] !== 1'bx ) && ( REM_out_prev[7] !== REM_out_expected_prev[7] )
		&& ((REM_out_expected_prev[7] !== last_REM_out_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REM_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REM_out_expected_prev);
		$display ("     Real value = %b", REM_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REM_out_exp[7] = REM_out_expected_prev[7];
	end
	if (
		( RI_out_expected_prev[0] !== 1'bx ) && ( RI_out_prev[0] !== RI_out_expected_prev[0] )
		&& ((RI_out_expected_prev[0] !== last_RI_out_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[0] = RI_out_expected_prev[0];
	end
	if (
		( RI_out_expected_prev[1] !== 1'bx ) && ( RI_out_prev[1] !== RI_out_expected_prev[1] )
		&& ((RI_out_expected_prev[1] !== last_RI_out_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[1] = RI_out_expected_prev[1];
	end
	if (
		( RI_out_expected_prev[2] !== 1'bx ) && ( RI_out_prev[2] !== RI_out_expected_prev[2] )
		&& ((RI_out_expected_prev[2] !== last_RI_out_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[2] = RI_out_expected_prev[2];
	end
	if (
		( RI_out_expected_prev[3] !== 1'bx ) && ( RI_out_prev[3] !== RI_out_expected_prev[3] )
		&& ((RI_out_expected_prev[3] !== last_RI_out_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[3] = RI_out_expected_prev[3];
	end
	if (
		( RI_out_expected_prev[4] !== 1'bx ) && ( RI_out_prev[4] !== RI_out_expected_prev[4] )
		&& ((RI_out_expected_prev[4] !== last_RI_out_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[4] = RI_out_expected_prev[4];
	end
	if (
		( RI_out_expected_prev[5] !== 1'bx ) && ( RI_out_prev[5] !== RI_out_expected_prev[5] )
		&& ((RI_out_expected_prev[5] !== last_RI_out_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[5] = RI_out_expected_prev[5];
	end
	if (
		( RI_out_expected_prev[6] !== 1'bx ) && ( RI_out_prev[6] !== RI_out_expected_prev[6] )
		&& ((RI_out_expected_prev[6] !== last_RI_out_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[6] = RI_out_expected_prev[6];
	end
	if (
		( RI_out_expected_prev[7] !== 1'bx ) && ( RI_out_prev[7] !== RI_out_expected_prev[7] )
		&& ((RI_out_expected_prev[7] !== last_RI_out_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RI_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RI_out_expected_prev);
		$display ("     Real value = %b", RI_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RI_out_exp[7] = RI_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module neander_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg mclk;
// wires                                               
wire [7:0] AC_out;
wire cargaPC;
wire incPC;
wire [2:0] INSTR_time;
wire [7:0] PC_out;
wire [7:0] RDM_out;
wire [7:0] REM_out;
wire [7:0] RI_out;

wire sampler;                             

// assign statements (if any)                          
neander_top i1 (
// port map - connection between master ports and signals/registers   
	.AC_out(AC_out),
	.cargaPC(cargaPC),
	.incPC(incPC),
	.INSTR_time(INSTR_time),
	.mclk(mclk),
	.PC_out(PC_out),
	.RDM_out(RDM_out),
	.REM_out(REM_out),
	.RI_out(RI_out)
);

// mclk
always
begin
	mclk = 1'b0;
	mclk = #10000 1'b1;
	#10000;
end 

neander_top_vlg_sample_tst tb_sample (
	.mclk(mclk),
	.sampler_tx(sampler)
);

neander_top_vlg_check_tst tb_out(
	.AC_out(AC_out),
	.cargaPC(cargaPC),
	.incPC(incPC),
	.INSTR_time(INSTR_time),
	.PC_out(PC_out),
	.RDM_out(RDM_out),
	.REM_out(REM_out),
	.RI_out(RI_out),
	.sampler_rx(sampler)
);
endmodule

